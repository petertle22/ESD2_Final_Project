-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj_2\hdlsrc\ImageProcessingNoShift\subtracti_ip_src_Subsystem1.vhd
-- Created: 2024-04-26 14:00:06
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: subtracti_ip_src_Subsystem1
-- Source Path: ImageProcessingNoShift/subtraction_core/Subsystem1
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.subtracti_ip_src_subtraction_core_pkg.ALL;

ENTITY subtracti_ip_src_Subsystem1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        In2                               :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        Video_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
        );
END subtracti_ip_src_Subsystem1;


ARCHITECTURE rtl OF subtracti_ip_src_Subsystem1 IS

  -- Component Declarations
  COMPONENT subtracti_ip_src_Binarize2
    PORT( u                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT subtracti_ip_src_Binarize3
    PORT( u                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          Out1                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : subtracti_ip_src_Binarize2
    USE ENTITY work.subtracti_ip_src_Binarize2(rtl);

  FOR ALL : subtracti_ip_src_Binarize3
    USE ENTITY work.subtracti_ip_src_Binarize3(rtl);

  -- Signals
  SIGNAL In2_unsigned                     : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL gray4_out1                       : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL gray2_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL gray_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL gray3_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum1_sub_cast                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Sum1_sub_cast_1                  : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Sum1_sub_temp                    : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Sum1_out1                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Binarize2_out1                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Binarize2_out1_unsigned          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL gray1_out1                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Sum_sub_cast                     : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Sum_sub_cast_1                   : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Sum_sub_temp                     : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL Sum_out1                         : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Binarize3_out1                   : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Binarize3_out1_unsigned          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL y                                : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay2_reg                       : vector_of_unsigned64(0 TO 1);  -- ufix64 [2]
  SIGNAL Delay2_out1                      : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  u_Binarize2 : subtracti_ip_src_Binarize2
    PORT MAP( u => std_logic_vector(Sum1_out1),  -- uint8
              Out1 => Binarize2_out1  -- uint8
              );

  u_Binarize3 : subtracti_ip_src_Binarize3
    PORT MAP( u => std_logic_vector(Sum_out1),  -- uint8
              Out1 => Binarize3_out1  -- uint8
              );

  In2_unsigned <= unsigned(In2);

  gray4_out1 <= In2_unsigned(63 DOWNTO 32);

  gray2_out1 <= In2_unsigned(47 DOWNTO 40);

  gray_out1 <= In2_unsigned(63 DOWNTO 56);

  Constant_out1 <= to_unsigned(16#0000#, 16);

  gray3_out1 <= In2_unsigned(39 DOWNTO 32);

  Sum1_sub_cast <= signed(resize(gray2_out1, 9));
  Sum1_sub_cast_1 <= signed(resize(gray3_out1, 9));
  Sum1_sub_temp <= Sum1_sub_cast - Sum1_sub_cast_1;
  
  Sum1_out1 <= "00000000" WHEN Sum1_sub_temp(8) = '1' ELSE
      unsigned(Sum1_sub_temp(7 DOWNTO 0));

  Binarize2_out1_unsigned <= unsigned(Binarize2_out1);

  gray1_out1 <= In2_unsigned(55 DOWNTO 48);

  Sum_sub_cast <= signed(resize(gray_out1, 9));
  Sum_sub_cast_1 <= signed(resize(gray1_out1, 9));
  Sum_sub_temp <= Sum_sub_cast - Sum_sub_cast_1;
  
  Sum_out1 <= "00000000" WHEN Sum_sub_temp(8) = '1' ELSE
      unsigned(Sum_sub_temp(7 DOWNTO 0));

  Binarize3_out1_unsigned <= unsigned(Binarize3_out1);

  y <= gray4_out1 & Constant_out1 & Binarize2_out1_unsigned & Binarize3_out1_unsigned;

  Delay2_process : PROCESS (clk)
  BEGIN
    IF clk'EVENT AND clk = '1' THEN
      IF reset = '1' THEN
        Delay2_reg <= (OTHERS => to_unsigned(0, 64));
      ELSIF enb = '1' THEN
        Delay2_reg(0) <= y;
        Delay2_reg(1) <= Delay2_reg(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(1);

  Video_out <= std_logic_vector(Delay2_out1);

END rtl;

